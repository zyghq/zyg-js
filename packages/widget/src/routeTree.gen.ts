/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as IndexImport } from './routes/index'
import { Route as ThreadsIndexImport } from './routes/threads/index'
import { Route as ThreadsNewImport } from './routes/threads/new'
import { Route as ThreadsThreadIdImport } from './routes/threads/$threadId'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ThreadsIndexRoute = ThreadsIndexImport.update({
  path: '/threads/',
  getParentRoute: () => rootRoute,
} as any)

const ThreadsNewRoute = ThreadsNewImport.update({
  path: '/threads/new',
  getParentRoute: () => rootRoute,
} as any)

const ThreadsThreadIdRoute = ThreadsThreadIdImport.update({
  path: '/threads/$threadId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/threads/$threadId': {
      id: '/threads/$threadId'
      path: '/threads/$threadId'
      fullPath: '/threads/$threadId'
      preLoaderRoute: typeof ThreadsThreadIdImport
      parentRoute: typeof rootRoute
    }
    '/threads/new': {
      id: '/threads/new'
      path: '/threads/new'
      fullPath: '/threads/new'
      preLoaderRoute: typeof ThreadsNewImport
      parentRoute: typeof rootRoute
    }
    '/threads/': {
      id: '/threads/'
      path: '/threads'
      fullPath: '/threads'
      preLoaderRoute: typeof ThreadsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/threads/new': typeof ThreadsNewRoute
  '/threads': typeof ThreadsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/threads/new': typeof ThreadsNewRoute
  '/threads': typeof ThreadsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/threads/new': typeof ThreadsNewRoute
  '/threads/': typeof ThreadsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/search'
    | '/threads/$threadId'
    | '/threads/new'
    | '/threads'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/search' | '/threads/$threadId' | '/threads/new' | '/threads'
  id:
    | '__root__'
    | '/'
    | '/search'
    | '/threads/$threadId'
    | '/threads/new'
    | '/threads/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchRoute: typeof SearchRoute
  ThreadsThreadIdRoute: typeof ThreadsThreadIdRoute
  ThreadsNewRoute: typeof ThreadsNewRoute
  ThreadsIndexRoute: typeof ThreadsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchRoute: SearchRoute,
  ThreadsThreadIdRoute: ThreadsThreadIdRoute,
  ThreadsNewRoute: ThreadsNewRoute,
  ThreadsIndexRoute: ThreadsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/search",
        "/threads/$threadId",
        "/threads/new",
        "/threads/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/threads/$threadId": {
      "filePath": "threads/$threadId.tsx"
    },
    "/threads/new": {
      "filePath": "threads/new.tsx"
    },
    "/threads/": {
      "filePath": "threads/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
